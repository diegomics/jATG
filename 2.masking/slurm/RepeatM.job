#!/bin/bash

#SBATCH -J RepeatM

#SBATCH --mail-type=END,FAIL

#SBATCH --cpus-per-task=16
#SBATCH --mem=192G #64G
#SBATCH --time=12-00:00:00


export PATH="${CONDA_BIN_DIR}:${PATH}"
source activate jATG_env

${SINGULARITY_LOAD} #comment if singularity is in path

LC_ALL=C

echo "=== 1/5. Indexing genome for RepeatModeler...  ======================================="

mkdir -p ${OUT_DIR}/jATG/${SPECIES_NAME}/${ASSEMBLY_ID}/2.masking/1_modeler
mkdir -p /dev/shm/${ASSEMBLY_ID}/2.masking/1_modeler

cd /dev/shm/${ASSEMBLY_ID}/2.masking/1_modeler

if [[ "${ASSEMBLY##*.}" == "gz" ]]
then
    INTER=$(basename ${ASSEMBLY} .gz)
    export ASSEMBLY_NAME=$(basename $INTER .${INTER##*.})
    if [[ -e ${TMPDIR}/${ASSEMBLY_NAME}.fa ]]
    then
        echo "decompressed file exist, creating the link..."
        ln -s "${TMPDIR}/${ASSEMBLY_NAME}.fa" "${ASSEMBLY_NAME}.fa"
    else
        echo "decompressing the file..."
        gunzip -c ${ASSEMBLY} > "${TMPDIR}/${ASSEMBLY_NAME}.fa"
        ln -s "${TMPDIR}/${ASSEMBLY_NAME}.fa" "${ASSEMBLY_NAME}.fa"
    fi
elif  [[ "${ASSEMBLY##*.}" == "fa" ]] || [[ "${ASSEMBLY##*.}" == "fasta" ]] || [[ "${ASSEMBLY##*.}" == "fna" ]]
then
    echo "crating the link..."
    export ASSEMBLY_NAME=$(basename $ASSEMBLY .${ASSEMBLY##*.})
    ln -s ${ASSEMBLY} "${ASSEMBLY_NAME}.fa"
else
    echo "Invalid reference extension name!"
fi


singularity exec --bind ${BIND_DIR}:${BIND_DIR} "${INSTALLATION_DIR}/containers/tetools_latest.sif" \
BuildDatabase -name ${ASSEMBLY_NAME} ${ASSEMBLY_NAME}.fa


echo "=== 2/5. Starting RepeatModeler...  =================================================="

singularity exec --bind ${BIND_DIR}:${BIND_DIR} "${INSTALLATION_DIR}/containers/tetools_latest.sif" \
RepeatModeler -database ${ASSEMBLY_NAME} -threads ${SLURM_CPUS_PER_TASK} -LTRStruct

cp -r * ${OUT_DIR}/jATG/${SPECIES_NAME}/${ASSEMBLY_ID}/2.masking/1_modeler
rm -rf /dev/shm/${ASSEMBLY_ID}/2.masking/1_modeler


echo "=== 3/5. Combining repeats libraries...  =============================================="

mkdir -p ${OUT_DIR}/jATG/${SPECIES_NAME}/${ASSEMBLY_ID}/2.masking/2_libraries

cd ${OUT_DIR}/jATG/${SPECIES_NAME}/${ASSEMBLY_ID}/2.masking/2_libraries

if [ -z "${LINEAGE_NAME}" ]
then
      LINEAGE_NAME=$(echo ${SPECIES_NAME} | sed 's/_/ /g')
else
      echo "Using ${LINEAGE_NAME} as lineage for extracting FASTAs from the installed libraries"
fi

#extract a species-specific FASTA library from the installed libraries
singularity exec --bind ${BIND_DIR}:${BIND_DIR} --pwd /opt/RepeatMasker/Libraries/ "${INSTALLATION_DIR}/containers/tetools_latest.sif" \
famdb.py -i RepeatMaskerLib.h5 families --format fasta_name --include-class-in-name --ancestors --descendants "${LINEAGE_NAME}" > ${ASSEMBLY_NAME}-rm.fa

#combine libraries
cat ${ASSEMBLY_NAME}-rm.fa "${OUT_DIR}/jATG/${SPECIES_NAME}/${ASSEMBLY_ID}/2.masking/1_modeler/${ASSEMBLY_NAME}-families.fa" > "${ASSEMBLY_NAME}_combined.fa"


echo "=== 4/5. Starting RepeatMasker...  ==================================================="

mkdir -p ${OUT_DIR}/jATG/${SPECIES_NAME}/${ASSEMBLY_ID}/2.masking/3_masker
mkdir -p /dev/shm/${ASSEMBLY_ID}/2.masking/3_masker

cd /dev/shm/${ASSEMBLY_ID}/2.masking/3_masker
ln -s ${OUT_DIR}/jATG/${SPECIES_NAME}/${ASSEMBLY_ID}/2.masking/1_modeler/${ASSEMBLY_NAME}.fa ${ASSEMBLY_NAME}

singularity exec --bind ${BIND_DIR}:${BIND_DIR} "${INSTALLATION_DIR}/containers/tetools_latest.sif" \
RepeatMasker -pa 4 -a -s -gccalc -xsmall -gff -lib ${OUT_DIR}/jATG/${SPECIES_NAME}/${ASSEMBLY_ID}/2.masking/2_libraries/${ASSEMBLY_NAME}_combined.fa ${ASSEMBLY_NAME}

mv ${ASSEMBLY_NAME}.masked ${ASSEMBLY_NAME}.masked.fa

# generate bed files useful for masking
rmsk2bed --max-mem 192G < ${ASSEMBLY_NAME}.out > ${ASSEMBLY_NAME}.bed
cut -f1,2,3 ${ASSEMBLY_NAME}.bed > temp.bed
bedtools merge -i temp.bed > ${ASSEMBLY_NAME}.3cols.bed
rm temp.bed

# generate hard-masked assembly fasta file
bedtools maskfasta -fi ${ASSEMBLY_NAME}.masked.fa -bed ${ASSEMBLY_NAME}.3cols.bed -fo ${ASSEMBLY_NAME}.HM.fa


echo "=== 5/5. Plotting results...  ========================================================"

singularity exec --bind ${BIND_DIR}:${BIND_DIR} "${INSTALLATION_DIR}/containers/tetools_latest.sif" \
calcDivergenceFromAlign.pl -s ${ASSEMBLY_NAME}.align.divsum -a ${ASSEMBLY_NAME}.align_with_div ${ASSEMBLY_NAME}.align

SIZE=$(grep "total length:" ${ASSEMBLY_NAME}.tbl | awk '{print $3}')

singularity exec --bind ${BIND_DIR}:${BIND_DIR} "${INSTALLATION_DIR}/containers/tetools_latest.sif" \
createRepeatLandscape.pl -div ${ASSEMBLY_NAME}.align.divsum -g ${SIZE} > ${ASSEMBLY_NAME}.align.divsum.html

python ${INSTALLATION_DIR}/2.masking/scripts/repeatMaskerHtml2R.py -html ${ASSEMBLY_NAME}.align.divsum.html -out ${ASSEMBLY_NAME}.tsv

echo -e "${ASSEMBLY_ID}\t$(realpath ${ASSEMBLY_NAME}.tsv)" > plotREP.cfg

Rscript ${INSTALLATION_DIR}/2.masking/scripts/plotREP.R plotREP.cfg ${ASSEMBLY_NAME}.svg


cp -r * ${OUT_DIR}/jATG/${SPECIES_NAME}/${ASSEMBLY_ID}/2.masking/3_masker
rm -rf /dev/shm/${ASSEMBLY_ID}/2.masking/3_masker
