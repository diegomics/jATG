#!/bin/bash

#SBATCH -J Index

#SBATCH --cpus-per-task=1
#SBATCH --mem=64G
#SBATCH --time=03:00:00

export PATH="${CONDA_BIN_DIR}:${PATH}"
source activate jATG_env

${SINGULARITY_LOAD}

cd ${OUT_DIR}/jATG/${SPECIES_NAME}/${ASSEMBLY_ID}/${SAMPLE_NAME}/4.calling/0_idx


###############################################################################
echo ""
echo ". Indexing reference..."
echo ""

if [[ "${ASSEMBLY##*.}" == "gz" ]]
then
    INTER=$(basename ${ASSEMBLY} .gz)
    export ASSEMBLY_NAME=$(basename $INTER .${INTER##*.})
    if [[ -e ${TMPDIR}/${ASSEMBLY_NAME}.fa ]]
    then
        echo "decompressed file exist, creating the link..."
        ln -s "${TMPDIR}/${ASSEMBLY_NAME}.fa" "${ASSEMBLY_NAME}.fa"
    else
        echo "decompressing the file..."
        gunzip -c ${ASSEMBLY} > "${TMPDIR}/${ASSEMBLY_NAME}.fa"
        ln -s "${TMPDIR}/${ASSEMBLY_NAME}.fa" "${ASSEMBLY_NAME}.fa"
    fi
elif  [[ "${ASSEMBLY##*.}" == "fa" ]] || [[ "${ASSEMBLY##*.}" == "fasta" ]] || [[ "${ASSEMBLY##*.}" == "fna" ]]
then
    echo "crating the link..."
    export ASSEMBLY_NAME=$(basename $ASSEMBLY .${ASSEMBLY##*.})
    ln -s ${ASSEMBLY} "${ASSEMBLY_NAME}.fa"
else
    echo "Invalid reference extension name!"
fi


# indexing depending on the read type
if [[ "${READ_TYPE}" == "illuminaPE" ]]
then
	bwa-mem2 index -p ${ASSEMBLY_NAME} "${ASSEMBLY_NAME}.fa"

elif  [[ "${READ_TYPE}" == "HiFi" ]]
then

	minimap2 -d "${ASSEMBLY_NAME}.mmi" "${ASSEMBLY_NAME}.fa"
else
        echo 'Invalid read type. Valid values for READ_TYPE variable in variables.cnf file are: "illuminaPE" or "HiFi"'
fi

LC_ALL=C


#singularity exec -B ${BIND_DIR}:${BIND_DIR} ${INSTALLATION_DIR}/containers/gatk_latest.sif samtools \
#faidx "${ASSEMBLY_NAME}.fa"

singularity exec -B ${BIND_DIR}:${BIND_DIR} ${INSTALLATION_DIR}/containers/gatk_latest.sif gatk \
--java-options "-Xmx${SLURM_MEM_PER_NODE}M" CreateSequenceDictionary \
-R "${ASSEMBLY_NAME}.fa"

#echo ""
#echo ". Creating lists of scaffolds of 200 Mbp or less..."
#echo ""
#python ${INSTALLATION_DIR}/4.snp_calling/scripts/make_scaf_intervals.py "${ASSEMBLY_NAME}.fa.fai"


